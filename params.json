{"name":"Roger","tagline":"A continuous integration and build server for Docker containers","body":"<img align=\"right\" width=\"160px\" src=\"https://raw.githubusercontent.com/namshi/roger/master/bin/images/logo.png\" />\r\n\r\n# Roger\r\n\r\n> A continuous integration and build server and for docker containers\r\n\r\nRoger is a simple yet powerful build\r\nserver for docker containers: you will\r\nonly need to specify your configuration\r\nand it will build your projects every time\r\nyou schedule a build or, for example,\r\nopen a pull request on github.\r\n\r\nIt is easy to deploy and comes with\r\nbuilt-in integration with platforms\r\nlike Github or the Docker Registry,\r\nwhich means that you can build your\r\nprivate repositories and push them to\r\nthe Docker Hub or your own private\r\nregistry out of the box.\r\n\r\n![frontend](https://raw.githubusercontent.com/namshi/roger/master/bin/images/frontend.png)\r\n\r\nReady to hack?\r\n\r\n* [installation](#installation)\r\n* [configuration](#configuration-reference)\r\n  * [configuring a project](#project-configuration)\r\n  * [configuring the server](#server-configuration)\r\n  * [configuring auth](#configuring-auth)\r\n* [build hooks](#build-hooks)\r\n  * [github](#github)\r\n* [notification](#notifications)\r\n  * [comments on Github pull requests](#pull-requests-on-github)\r\n  * [email (Amazon SES)](#email-through-amazon-ses)\r\n* [publishing](#publishing-artifacts)\r\n  * [s3](#s3)\r\n* [hooks](#hooks)\r\n  * [after-build](#after-build)\r\n* [APIs](#apis)\r\n  * [get all projects](#listing-all-projects)\r\n  * [get all builds](#listing-all-builds)\r\n  * [get a build](#getting-a-build)\r\n  * [start a build](#triggering-builds)\r\n* [roger in production](#in-production)\r\n* [why roger?](#why-did-you-build-this)\r\n* [contributing](#contributing)\r\n* [tests](#tests)\r\n\r\n## Installation\r\n\r\nCreate a `config.yml` file for roger:\r\n\r\n``` yaml\r\nauth:\r\n  dockerhub: # these credentials are only useful if you need to push to the dockerhub\r\n    username: user # your username on the dockerhub\r\n    email:    someone@gmail.com # your...well, you get it\r\n    password: YOUR_DOCKERHUB_PASSWORD --> see https://github.com/namshi/roger#sensitive-data\r\n  github: YOUR_GITHUB_TOKEN # General token to be used to authenticate to clone any project or comment on PRs (https://github.com/settings/tokens/new)\r\n```\r\n\r\nNow clone and run it:\r\n\r\n```\r\ngit clone git@github.com:namshi/roger.git\r\n\r\ncd roger\r\n\r\ndocker build -t namshi/roger .\r\n\r\ndocker run -ti -p 6600:6600 \\\r\n-v /tmp/logs:/tmp/roger-builds/logs \\\r\n-v $(pwd)/db:/db \\\r\n-v /path/to/your/config.yml:/config.yml \\\r\n-v /var/run/docker.sock:/tmp/docker.sock \\\r\nnamshi/roger\r\n```\r\n\r\nIf roger starts correctly, you should see\r\nsomething like:\r\n\r\n```\r\n2015-01-27T17:52:50.827Z - info: using config: {...}}\r\nRoger running on port 6600\r\n```\r\n\r\nand you can open the web interface up\r\non your [localhost](http://localhost:6600).\r\n\r\nNow, time for our first build: pick a project of yours,\r\non github, and add a `build.yml` file in the root of the\r\nrepo:\r\n\r\n``` yaml\r\nredis: # this is the name of your project\r\n  registry: registry.company.com # your private registry, ie. 127.0.0.1:5000\r\n```\r\n\r\nthen visit `http://localhost:6600/api/build?repo=URL_OF_YOUR_REPO`\r\n(ie. `localhost:6600/api/build?repo=https://github.com/namshi/test-build`)\r\nand you should receive a confirmation that the build has been\r\nscheduled:\r\n\r\n![build-sched](https://raw.githubusercontent.com/namshi/roger/master/bin/images/build-scheduled.png)\r\n\r\nNow open the web interface, your docker build is running!\r\n\r\n![build-frontend](https://raw.githubusercontent.com/namshi/roger/master/bin/images/build-frontend.png)\r\n\r\n> Protip: if you do a docker-compose up in the root\r\n> of roger, the dev environment for roger, including\r\n> a local registry, starts on its own: you might want to\r\n> use this if you are playing with Roger for the first\r\n> time and you don't have a registry available at\r\n> registry.company.com\r\n\r\n## Configuration reference\r\n\r\n### Project configuration\r\n\r\nIn your repos, you can specify a few different\r\nconfiguration options, for example:\r\n\r\n``` yaml\r\nredis: # name of the project, will be the name of the image as well\r\n  registry:   127.0.0.1:5001 # url of the registry to which we're gonna push\r\n```\r\n\r\nWant to push to the dockerhub?\r\n\r\n``` yaml\r\nredis: # if you don't specify the registry, we'll assume you want to push to a local registry at 127.0.0.1:5000\r\n  registry:     dockerhub\r\n```\r\n\r\nWant to publish assets to S3? Run tests? Here's a full overview of what roger\r\ncan do with your project:\r\n\r\n``` yaml\r\nredis:\r\n  dockerfilePath: some/subdir # location of the dockerfile, omit this if it's in the root of the repo\r\n  registry:       127.0.0.1:5001\r\n  revfile:        somedir # means roger will create a rev.txt file with informations about the build at this path\r\n  after-build: # hooks to execute after an image is built, before pushing it to the registry, ie. tests\r\n    - ls -la\r\n    - npm test\r\n  notify:\r\n    - github\r\n    - emailSes\r\n  publish:\r\n    -\r\n      to: s3\r\n      copy: /src/build/public/ # this is the path inside the container\r\n      bucket: my-bucket # name of the s3 bucket\r\n      bucketPath: initial-path # the initial path, ie. s3://my-bucket/initial-path\r\n      command: gulp build # optional: a command to run right before publishing (you might wanna build stuff here)\r\n```\r\n\r\nWant to build 2 projects from the same repo?\r\n\r\n``` yaml\r\nredis:\r\n  dockerfilePath: src\r\nredis-server:\r\n  dockerfilePath: server/src\r\n```\r\n\r\n### Server configuration\r\n\r\nRoger will read a `/config.yml` file that you\r\nneed to mount in the container:\r\n\r\n``` yaml\r\napp: # generic settings\r\n  url: 'https://builds.yourcompany.com' # optional, just used for logging\r\n  auth: ~ # authentication turned off by default, see next paragraph\r\nauth: # authentication on various providers\r\n  dockerhub: # these credentials are only useful if you need to push to the dockerhub\r\n    username: odino # your username on the dockerhub\r\n    email:    alessandro.nadalin@gmail.com # your...well, you get it\r\n    password: YOUR_DOCKERHUB_PASSWORD --> see https://github.com/namshi/roger#sensitive-data\r\n  github: YOUR_SECRET_TOKEN # General token to be used to authenticate to clone any project (https://github.com/settings/tokens/new)\r\nnotifications: # configs to notify of build failures / successes\r\n  github: '{{ auth.github }}' # config values can reference other values, this will post a comment on an open PR\r\n  emailSes: # sends an email through amazon SES\r\n    accessKey: 1234\r\n    secret: 5678\r\n    region: eu-west-1\r\n    to:\r\n      - john.doe@gmail.com # a list of people who will be notified\r\n      - committer # this is a special value that references the email of the commit author\r\n    from: builds@company.com # sender email (needs to be verified on SES: http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html)\r\n```\r\n\r\n### Configuring auth\r\n\r\nRoger comes with no authentication: all its\r\nroutes are public and everyone with access to\r\nroger can trigger builds and see everything.\r\n\r\nSince everyone has different needs, we want to\r\nlet you specify the auth mechanism of your\r\nchoice, based on [passport](http://passportjs.org/).\r\n\r\nJust define an auth provider in roger's config:\r\n\r\n``` yaml\r\napp:\r\n  auth:\r\n    provider: '/auth/myProvider.js'\r\n```\r\n\r\nAt this point, mount your provider when launching\r\nthe container with `-v mycode/auth:/auth`: Roger will\r\ndynamically load your own module and import it in\r\nthe app.\r\n\r\nThe `myProvider.js` module needs to expose a function\r\nthat accepts an app and register its own auth mechanism:\r\nit sounds more complicated than it is, so I'll just\r\nforward you to the [example provider](https://github.com/namshi/roger/blob/master/examples/auth/local.js).\r\n\r\n## Build hooks\r\n\r\nRoger exposes a simple HTTP interface\r\nand provides integration with some SCM\r\nprovider, ie. GitHub.\r\n\r\n### Github\r\n\r\nSimply add a new webhook to your repo at\r\n`https://github.com/YOU/YOUR_PROJECT/settings/hooks/new`\r\nand configure it as follows:\r\n\r\n![github webhook](https://raw.githubusercontent.com/namshi/roger/master/bin/images/webhook.png)\r\n\r\nRoger will build everytime you push to\r\ngithub, a new tag is created or you\r\ncomment on a PR with the text `build please!`.\r\n\r\n## Notifications\r\n\r\nOnce your build finishes, you can notify\r\n*someone* about its result (ie. success / failure).\r\n\r\n### Pull requests on Github\r\n\r\nThis notification lets you update the status of a PR\r\nby commenting on it.\r\n\r\n![comment on pull requests](https://raw.githubusercontent.com/namshi/roger/master/bin/images/notification-github.png)\r\n\r\nIf you have a PR from the branch `my-patch`\r\nopen and roger is building that branch, it\r\nwill then update the PR accordingly.\r\n\r\n``` yaml\r\nmy-project:\r\n  notify:\r\n    - github\r\n```\r\n\r\n### Email (through Amazon SES)\r\n\r\nIf you want to receive notifications\r\nvia email, you can simply configure\r\nthe `emailSes` handler that will\r\nsend emails through [Amazon SES](http://aws.amazon.com/ses/).\r\n\r\n![ses notifications](https://raw.githubusercontent.com/namshi/roger/master/bin/images/notification-ses.png)\r\n\r\n``` yaml\r\nmy-project:\r\n  branch:       master\r\n  from:         https://github.com/me/awesome-project\r\n  notify:\r\n    - emailSes\r\n```\r\n\r\nand then in roger's `config.yml`:\r\n\r\n``` yaml\r\nnotifications:\r\n  emailSes:\r\n    accessKey: 1a2b3c4d5e6f\r\n    secret: 1a2b3c4d5e6f\r\n    region: eu-west-1\r\n    to:\r\n      - committer\r\n      - someone@yourcompany.com\r\n    from: admin@namshi.com\r\n```\r\n\r\nNote that:\r\n\r\n* the `from` address needs to be\r\n[verified on SES](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html)\r\n* `committer` is a special value that represents the committer's email\r\n\r\n## Publishing artifacts\r\n\r\nRoger provides some ways to upload your build to\r\nsome supported providers.\r\n\r\n### S3\r\n\r\nYou can upload stuff from your container to an S3\r\nbucket by simply specifying the following in your\r\nproject configuration:\r\n\r\n``` yaml\r\nmyproject:\r\n  publish:\r\n    -\r\n      to: s3\r\n      copy: /src/build/public/ # this is the path inside the container\r\n      bucket: my-bucket # name of the s3 bucket\r\n      bucketPath: initial-path # the initial path, ie. s3://my-bucket/initial-path\r\n      command: gulp build # optional: a command to run right before publishing (you might wanna build stuff here)\r\n```\r\n\r\nThen just store the s3 credentials in roger's `config.yml`:\r\n\r\n``` yaml\r\npublishers:\r\n  s3:\r\n    key: 1a2b3c4d5e6f\r\n    secret: 1a2b3c4d5e6f\r\n```\r\n\r\nWhat happens is that we're gonna run a container\r\nwith the image we just built, then copy a directory\r\noutside of the container (yes, to the host machine)\r\nand then upload that to S3.\r\n\r\n## Hooks\r\n\r\nRoger has the concept of hooks, which are\r\ncommands that you can run at certain steps\r\nof the build.\r\n\r\n### after-build\r\n\r\nAfter an image is built, you can run as many\r\nhooks as you want **in a container running\r\nthat specific image**; this means that if you\r\nwant to run the tests of your applications you\r\nwill most likely configure the project as follows:\r\n\r\n``` yaml\r\nmy-node-app:\r\n  registry: registry.company.com\r\n  after-build:\r\n    - npm test\r\n```\r\n\r\nThat is it! Now, after an image is built, before\r\ntagging it and sending it to the registry, roger\r\nwill run `npm test` in your container and, if the\r\ntests fail, will stop the build.\r\n\r\nNeat, ah?\r\n\r\n## APIs\r\n\r\n### Listing all projects\r\n\r\n`/api/projects` will return you the latest\r\n10 projects that were updated (added on roger,\r\na build was triggered, etc).\r\n\r\nYou can customize the number of projects you will\r\nget back by adding a `limit` parameter to the\r\nquery string.\r\n\r\n``` json\r\n{\r\n    \"projects\": [\r\n        {\r\n            \"name\": \"https://github.com/company/redis__redis-server\",\r\n            \"alias\": \"redis-server (company/redis)\",\r\n            \"latest_build\": {\r\n                \"branch\": \"patch-1\",\r\n                \"project\": \"https://github.com/company/redis__redis-server\",\r\n                \"status\": \"passed\",\r\n                \"id\": \"0715a3b5-43fe-4d07-9705-82641db07c25-redis-server\",\r\n                \"tag\": \"registry.company.com/redis-server:patch-1\",\r\n                \"created_at\": \"2015-07-02T08:44:28+00:00\",\r\n                \"updated_at\": \"2015-07-02T08:45:09+00:00\"\r\n            }\r\n        },\r\n        ...\r\n    ]\r\n}\r\n```\r\n\r\n### Listing all builds\r\n\r\n`/api/builds` will return you the latest\r\n10 builds roger ran. You can customize the\r\nnumber of builds you will get back by adding\r\na `limit` parameter to the query string.\r\n\r\n### Getting a build\r\n\r\n`/api/builds/BUILD_ID` will return you the\r\ndetails of a build:\r\n\r\n``` json\r\n{\r\n    \"build\": {\r\n        \"branch\": \"patch-1\",\r\n        \"project\": \"https://github.com/company/redis__redis\",\r\n        \"status\": \"passed\",\r\n        \"id\": \"0715a3b5-43fe-4d07-9705-82641db07c25-redis\",\r\n        \"tag\": \"registry.company.com/redis:patch-1\",\r\n        \"created_at\": \"2015-07-02T08:44:28+00:00\",\r\n        \"updated_at\": \"2015-07-02T08:45:09+00:00\"\r\n    }\r\n}\r\n```\r\n\r\nIf you add `/log` at the end of the URL (ie. `/api/builds/1234/log`)\r\nyou will be streamed the log output of that build:\r\n\r\n```\r\n2015-01-27T19:18:34.810Z - info: [127.0.0.1:5000/redis:patch-1] Scheduled a build of cb5ea16d-5266-4018-b571-954e75b825e0\r\n2015-01-27T19:18:34.810Z - info: Cloning https://github.com/namshi/redis:patch-1 in /tmp/roger-builds/sources/cb5ea16d-5266-4018-b571-954e75b825e0\r\n2015-01-27T19:18:34.816Z - info: git clone https://github.com/namshi/redis: Cloning into '/tmp/roger-builds/sources/cb5ea16d-5266-4018-b571-954e75b825e0'...\r\n\r\n2015-01-27T19:18:37.274Z - info: [127.0.0.1:5000/redis:patch-1] Created tarball for cb5ea16d-5266-4018-b571-954e75b825e0\r\n2015-01-27T19:18:37.365Z - info: Build of 127.0.0.1:5000/redis:patch-1 is in progress...\r\n2015-01-27T19:18:37.365Z - info: [127.0.0.1:5000/redis:patch-1] Step 0 : FROM dockerfile/redis\r\n\r\n2015-01-27T19:18:37.365Z - info: [127.0.0.1:5000/redis:patch-1]  ---> c08280595650\r\n...\r\n...\r\n...\r\n```\r\n\r\n### Triggering builds\r\n\r\nYou can simply issue a GET request to the endpoint\r\n`/api/v2/build?repo=REPO_URL&branch=BRANCH`.\r\n\r\nFor example, both of these URLs are valid endpoints:\r\n\r\n* `/api/build?repo=https://github.com/redis/redis`\r\n* `/api/build?repo=https://github.com/redis/redis&branch=master`\r\n\r\nIf you don't specify a branch, `master`\r\nwill be used.\r\n\r\nThe same endpoint supports `POST` requests as well, `GET`\r\nshould only really be used for debugging or so\r\n([here's why](http://www.looah.com/source/view/2284)).\r\n\r\nYou can also specify [docker options](https://docs.docker.com/reference/api/docker_remote_api_v1.17/#build-image-from-a-dockerfile) in your request,\r\nie. if you want the build to run with the `--no-cache` flag\r\njust call `/api/build?repo=https://github.com/redis/redis&options[nocache]=true`.\r\n\r\n## In production\r\n\r\nEvery container (even Roger itself) at [Namshi](https://github.com/namshi)\r\ngets built through Roger: we have been running it, behind our own firewall,\r\nfor the past 6 months or so and had no issues with it; whenever our engineers\r\npush to github Roger builds the project and pushes it to our private registry,\r\noften in a matter of seconds.\r\n\r\n## Why did you build this?\r\n\r\nGood question, especially since we hate to re-invent the wheel!\r\n\r\nRoger was built since, at the very beginning of our experience\r\nwith Docker, there were no decent SaaS that could run Docker\r\nbuilds in a matter of seconds: we first tried the DockerHub\r\nand it could even take up to 15 minutes to get a build done, which was\r\nfrustrating. We wanted new images to be available in seconds.\r\nAt the same time, neither Travis-CI, CodeShip nor Drone.io\r\nseemed to have a tight and nice integration with Docker\r\n(though some of them have made giant steps over the past few\r\nmonths so...who knows what we're gonna be using in a year!).\r\n\r\nThus, one day, we decided to try [dockerode](https://github.com/apocas/dockerode)\r\nout and see if we could hack a Docker builder in a couple\r\nevenings. The idea of running Roger in its own container,\r\nsharing the docker socket, comes from the\r\n[nginx proxy container](https://github.com/jwilder/nginx-proxy#usage).\r\n\r\nAt the beginning, Roger only ran via its APIs: once we\r\nstarted flirting with the idea of making it public,\r\nwe decided to take some time off and build a small\r\nfrontend with ReactJS, as an experiment -- part of the\r\n[perks of working at Namshi](http://tech.namshi.com/join-us/) ;-)\r\n\r\nRoger has been running without problems for a few months,\r\nand we're pretty happy with it.\r\n\r\n## Contributing\r\n\r\nYou can easily hack on roger by simply cloning\r\nthis repository and then running:\r\n\r\n```\r\ndocker-compose build\r\ndocker-compose run server npm install\r\ndocker-compose run server bash -c \"cd src/client && npm install && npm run build\"\r\ndocker-compose up\r\n```\r\n\r\nand you will have the roger server and a simple docker registry\r\nrunning on your localhost.\r\n\r\nWhen you trigger a build, you should see something\r\nlike:\r\n\r\n```\r\n~  ᐅ docker ps\r\nCONTAINER ID        IMAGE                 COMMAND                CREATED             STATUS              PORTS                              NAMES\r\n12e1d7e6d260        roger_server:latest   \"nodemon /src/src/in   4 minutes ago       Up 4 minutes        3000/tcp, 0.0.0.0:5000->5000/tcp   roger_server_1\r\ne3bf2bfa935e        registry:latest       \"docker-registry\"      4 minutes ago       Up 4 minutes        0.0.0.0:5001->5000/tcp             roger_registry_1\r\n~  ᐅ docker logs -f --tail=0 12e1d7e6d260\r\n2015-01-23T14:53:29.610Z - info: Scheduled a build of 127.0.0.1:5001/redis:master\r\n2015-01-23T14:53:29.610Z - info: Cloning https://github.com/dockerfile/redis:master in /tmp/roger-builds/sources/redis/1422024809\r\n2015-01-23T14:53:32.807Z - info: Finished cloning https://github.com/dockerfile/redis:master\r\n2015-01-23T14:53:32.820Z - info: created tarball for 127.0.0.1:5001/redis:master\r\n2015-01-23T14:53:32.897Z - info: Build of 127.0.0.1:5001/redis:master is in progress...\r\n2015-01-23T14:53:32.897Z - info: [127.0.0.1:5001/redis:master] Step 0 : FROM dockerfile/ubuntu\r\n\r\n2015-01-23T14:53:32.897Z - info: [127.0.0.1:5001/redis:master]  ---> 57d0bc345ba9\r\n\r\n2015-01-23T14:53:32.897Z - info: [127.0.0.1:5001/redis:master] Step 1 : RUN cd /tmp &&   wget http://download.redis.io/redis-stable.tar.gz &&   tar xvzf redis-stable.tar.gz &&   cd redis-stable &&   make &&   make install &&   cp -f src/redis-sentinel /usr/local/bin &&   mkdir -p /etc/redis &&   cp -f *.conf /etc/redis &&   rm -rf /tmp/redis-stable* &&   sed -i 's/^\\(bind .*\\)$/# \\1/' /etc/redis/redis.conf &&   sed -i 's/^\\(daemonize .*\\)$/# \\1/' /etc/redis/redis.conf &&   sed -i 's/^\\(dir .*\\)$/# \\1\\ndir \\/data/' /etc/redis/redis.conf &&   sed -i 's/^\\(logfile .*\\)$/# \\1/' /etc/redis/redis.conf\r\n\r\n2015-01-23T14:53:33.285Z - info: [127.0.0.1:5001/redis:master]  ---> Using cache\r\n\r\n2015-01-23T14:53:33.286Z - info: [127.0.0.1:5001/redis:master]  ---> 26bc665c9295\r\n\r\n2015-01-23T14:53:33.286Z - info: [127.0.0.1:5001/redis:master] Step 2 : VOLUME /data\r\n\r\n2015-01-23T14:53:33.645Z - info: [127.0.0.1:5001/redis:master]  ---> Using cache\r\n\r\n2015-01-23T14:53:33.645Z - info: [127.0.0.1:5001/redis:master]  ---> 6e4b36e3b7b6\r\n\r\n2015-01-23T14:53:33.645Z - info: [127.0.0.1:5001/redis:master] Step 3 : WORKDIR /data\r\n\r\n2015-01-23T14:53:34.007Z - info: [127.0.0.1:5001/redis:master]  ---> Using cache\r\n\r\n2015-01-23T14:53:34.008Z - info: [127.0.0.1:5001/redis:master]  ---> 9baac5d2adc3\r\n\r\n2015-01-23T14:53:34.008Z - info: [127.0.0.1:5001/redis:master] Step 4 : CMD redis-server /etc/redis/redis.conf\r\n\r\n2015-01-23T14:53:34.341Z - info: [127.0.0.1:5001/redis:master]  ---> Using cache\r\n\r\n2015-01-23T14:53:34.341Z - info: [127.0.0.1:5001/redis:master]  ---> 3910333848f1\r\n\r\n2015-01-23T14:53:34.341Z - info: [127.0.0.1:5001/redis:master] Step 5 : EXPOSE 6379\r\n\r\n2015-01-23T14:53:34.690Z - info: [127.0.0.1:5001/redis:master]  ---> Using cache\r\n\r\n2015-01-23T14:53:34.691Z - info: [127.0.0.1:5001/redis:master]  ---> 36c9365e8364\r\n\r\n2015-01-23T14:53:34.692Z - info: [127.0.0.1:5001/redis:master] Successfully built 36c9365e8364\r\n\r\n2015-01-23T14:53:34.693Z - info: Image 127.0.0.1:5001/redis:master built succesfully\r\n2015-01-23T14:53:34.714Z - info: Docker confirmed the build of 127.0.0.1:5001/redis:master, author , created on 2015-01-23T01:29:49.039114234Z on docker 1.4.1\r\n2015-01-23T14:53:34.714Z - info: Tagging 127.0.0.1:5001/redis:master\r\n2015-01-23T14:53:34.723Z - info: Pushing 127.0.0.1:5001/redis:master to 127.0.0.1:5001\r\n2015-01-23T14:53:36.852Z - info: [127.0.0.1:5001/redis:master] The push refers to a repository [127.0.0.1:5001/redis] (len: 1)\r\n2015-01-23T14:53:36.897Z - info: [127.0.0.1:5001/redis:master] Sending image list\r\n2015-01-23T14:53:37.037Z - info: [127.0.0.1:5001/redis:master] Pushing repository 127.0.0.1:5001/redis (1 tags)\r\n2015-01-23T14:53:37.067Z - info: [127.0.0.1:5001/redis:master] Image 511136ea3c5a already pushed, skipping\r\n2015-01-23T14:53:37.070Z - info: [127.0.0.1:5001/redis:master] Image 53f858aaaf03 already pushed, skipping\r\n2015-01-23T14:53:37.073Z - info: [127.0.0.1:5001/redis:master] Image 837339b91538 already pushed, skipping\r\n2015-01-23T14:53:37.078Z - info: [127.0.0.1:5001/redis:master] Image 615c102e2290 already pushed, skipping\r\n2015-01-23T14:53:37.080Z - info: [127.0.0.1:5001/redis:master] Image b39b81afc8ca already pushed, skipping\r\n2015-01-23T14:53:37.084Z - info: [127.0.0.1:5001/redis:master] Image 5aa9da73df5b already pushed, skipping\r\n2015-01-23T14:53:37.086Z - info: [127.0.0.1:5001/redis:master] Image ec4206da3b16 already pushed, skipping\r\n2015-01-23T14:53:37.089Z - info: [127.0.0.1:5001/redis:master] Image e00f3af60b33 already pushed, skipping\r\n2015-01-23T14:53:37.095Z - info: [127.0.0.1:5001/redis:master] Image e0a769f35586 already pushed, skipping\r\n2015-01-23T14:53:37.099Z - info: [127.0.0.1:5001/redis:master] Image f6060d642297 already pushed, skipping\r\n2015-01-23T14:53:37.104Z - info: [127.0.0.1:5001/redis:master] Image 17eef17d52cf already pushed, skipping\r\n2015-01-23T14:53:37.112Z - info: [127.0.0.1:5001/redis:master] Image 57d0bc345ba9 already pushed, skipping\r\n2015-01-23T14:53:37.118Z - info: [127.0.0.1:5001/redis:master] Image 26bc665c9295 already pushed, skipping\r\n2015-01-23T14:53:37.124Z - info: [127.0.0.1:5001/redis:master] Image 6e4b36e3b7b6 already pushed, skipping\r\n2015-01-23T14:53:37.131Z - info: [127.0.0.1:5001/redis:master] Image 9baac5d2adc3 already pushed, skipping\r\n2015-01-23T14:53:37.138Z - info: [127.0.0.1:5001/redis:master] Image 3910333848f1 already pushed, skipping\r\n2015-01-23T14:53:37.146Z - info: [127.0.0.1:5001/redis:master] Image 36c9365e8364 already pushed, skipping\r\n2015-01-23T14:53:37.146Z - info: [127.0.0.1:5001/redis:master] Pushing tag for rev [36c9365e8364] on {http://127.0.0.1:5001/v1/repositories/redis/tags/master}\r\n2015-01-23T14:53:37.202Z - info: Pushed image 127.0.0.1:5001/redis:master to the registry at http://127.0.0.1:5001\r\n2015-01-23T14:53:37.203Z - info: Finished build of 127.0.0.1:5001/redis:master in a few seconds #SWAG\r\n```\r\n\r\nProblems? [Open an issue](https://github.com/namshi/roger/issues)! Suggestions? Feel free\r\nto [send a PR](https://github.com/namshi/roger/pulls)!\r\n\r\n## Tests\r\n\r\nThere are currently no automated tests and it's\r\na shame :)\r\n\r\nAs of now we didn't find a good way / method to\r\nrun the whole server and check how it behaves in\r\ndifferent scenarios in an automated way, as all\r\ntests are manually ran at the moment. Unit-testing\r\nthe various scripts under `src` would be simple\r\nenough but the problem is that you should ensure\r\nthat the whole server runs fine, doesn't crash,\r\netc etc.\r\n\r\nIf you have a suggestion or would like to create\r\na spike feel **uberfree** to do so, as we believe\r\nthat, to go further, automated tests are always\r\na must.\r\n\r\n## TODO\r\n\r\n* client\r\n  * wall (use query parameters to include / exclude projects)\r\n* build tracking\r\n  * persist to SQLite\r\n  * mount sqlite\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}